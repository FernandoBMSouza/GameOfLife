#pragma kernel CSMain

struct Cube
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<Cube> cubeBuffer;
int nCubes;

int CountYellowNeighbors(uint3 cubeCoords)
{
    int count = 0;

    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            for (int k = -1; k <= 1; k++)
            {
                if (i == 0 && j == 0 && k == 0)
                    continue;

                int3 neighborCoords = cubeCoords + int3(i, j, k);

                if (neighborCoords.x >= 0 && neighborCoords.x < nCubes && 
                    neighborCoords.y >= 0 && neighborCoords.y < nCubes && 
                    neighborCoords.z >= 0 && neighborCoords.z < nCubes)
                {
                    uint neighborIndex = neighborCoords.z * nCubes * nCubes + neighborCoords.y * nCubes + neighborCoords.x;
                    float4 neighborColor = cubeBuffer[neighborIndex].color;

                    if (neighborColor.r == 1 && neighborColor.g != 1 && neighborColor.b != 1) // Comparação do componente "b" para amarelo
                    {
                        count++;
                    }
                }
            }
        }
    }
    return count;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int index = id.x + id.y * nCubes + id.z * nCubes * nCubes;

    int x = index % nCubes;
    int y = (index / nCubes) % nCubes;
    int z = index / (nCubes * nCubes);

    int3 cubeCoords = int3(x, y, z);

    int count = CountYellowNeighbors(cubeCoords);

    Cube currentCube = cubeBuffer[index];
    Cube nextCube = currentCube;

    if (currentCube.color.r == 1 && currentCube.color.g != 1 && currentCube.color.b != 1) // diferente de branco
    {
        if (count < 2 || count > 3)
        {
            nextCube.color = float4(1, 1, 1, 1); // Cor branca
        }
    }
    else
    {
        if (count == 3)
        {
            nextCube.color = float4(1.000f, 0.922f, 0.016f, 1.000f); // amarela
        }
    }

    cubeBuffer[index] = nextCube;
}
